{
  "hash": "1d8dc1b3401eea243da9c1cf8ec468b2",
  "result": {
    "markdown": "---\ntitle: \"Baseline Characteristics Table\"\nformat: \n  html:\n    embed-resources: true  \neditor: visual\n---\n\n\nA common task for us is putting together a baseline characteristics table, or \"Table 1.\" This is usually painful to do by hand, particularly when you often have to do it multiple times whenever a small change is made to a cohort. The following describes one way of automating much of this, using R and the `table1()` function in the table1 package.\n\n## Packages\n\n### Tidyverse\n\nIf you're not already familiar with it, I think you'll find [tidyverse](https://www.tidyverse.org/) extremely helpful - it is actually a bundle of packages centered around 'tidy' data, which is just a fancy description for data that take the form of 3 rules:\n\n1.  Each variable has its own column\n\n2.  Each observation has its own row.\n\n3.  Each value has its own cell.\n\nOutside of time-varying analyses, that's pretty much exactly the type of analytic dataset we are creating for most of our work.\n\n### Table1\n\nIn addition to tidyverse, for the baseline characteristics table, the package [table1](https://cran.r-project.org/web/packages/table1/vignettes/table1-examples.html) gets us pretty close to a final output. If you want to read more, see it's vignette at the aforementioned link.\n\n### Haven\n\n[Haven](https://haven.tidyverse.org/) is a tidyverse package that reads SAS datasets directly. Particularly helpful for us since most of our initial data wrangling has to take place in SAS. If you haven't noticed already, base R is not particularly good at handling huge datasets (absent a lot of memory resources on a VM) because it completely stores them in memory.\n\n### Flextable\n\n[Flextable](https://ardata-fr.github.io/flextable-book/) will be used to get the final output into a word document. Will explain more on this later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# if you need to install, you would use:\n# install.packages(c(\"tidyverse\", \"table1\"))\n\n# load the relevant packages\nlibrary(tidyverse)\nlibrary(table1)\nlibrary(haven)\nlibrary(flextable)\n```\n:::\n\n\n## Load the data\n\nHere's where you load the SAS dataset, using the haven package. First, you assign the object `tab1` (can be any name you want it to be) something using the `<-` assignment operator, and you assign it the dataset returned by the `read_sas()` function from haven. There's lots more options with this function than I use below, but the basics usually work well.\n\n::: callout-note\nNote that R has case-sensitive variable/column names. Make your life a lot easier and rename variables to lowercase with the `rename_with()` function and `tolower` option, i.e., `rename_with(tolower)` (see below)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# note that the filepath needs forward slashes, or two backwards slashes,\n# e.g., \"C:/Users/.../...sas7bdat\" or \"C:\\\\Users\\\\...\\\\...sas7bdat\"\n#\n# tab1 <- read_sas(\"E:/.../.../...sas7bdat\") %>% \n#   rename_with(tolower)    \n```\n:::\n\n\n## Data wrangling for table1\n\nI already have my data loaded in an object called `aim1cohort`, so I'm just going to assign it the new name `tab1`, but you would not need to run this if you run above to load the data directly from a SAS dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nload(file = \"/Users/stevensmith/Dropbox (UFL)/R Projects/K01-Initial_Antihtn_Prescribing/data/aim1cohort.rda\")\n\ntab1 <- aim1cohort \n```\n:::\n\n\n::: callout-tip\n## A note on 'pipe's\n\nOne thing that's worth reading up on the `%>%` \"pipe\". See this [here](https://magrittr.tidyverse.org/reference/pipe.html) or [here](https://r4ds.had.co.nz/pipes.html). It's a tidyverse thing originally coming from the magrittr package. Because it's quite popular, Base R has now incorporated its own pipe now which does almost exactly the same thing, but looks like this: `|\\`. You can use ctrl+shift+M as a short-cut, and in your R-studio preferences, you can tell R-Studio whether to use the native pipe `|>` or magrittr's `%>%`. Basically, it's a way to pipe an object forward from one function to the next, as opposed to having to nest a bunch of functions within one another.\n:::\n\nOk, here's the data wrangling code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab1 <- tab1 %>%\n  \n  # select only variables needed; ends_with() function is a nifty short cut to \n  # grab all variables whose name ends with that string\n  select(c(\"patid\",\"source\",\"age\",\"age_cat\", \"hispanic\",\"sex\",\"race\",\"index_year\", \n           ends_with(\"indicator\"), \"combined_score_num\")) %>%\n  \n  # mutate() is for creating new variables. Some of this should look pretty \n  # similar to what you're used to in SAS. \n  # c() function just combines multiple things and works similarly here to a\n  # SAS parenthetical list, i.e., race in (\"No Information\", ...)\n  mutate(race = if_else(race %in% c(\"No Information\",\"Refuse to Answer\",\"Unknown\"), \"Unknown\", race),\n         \n         # factor() is a vector type for categorical data and it's important for\n         # table1 package because it's how table1 figures out what is categorical\n         # vs. continuous, and as we'll see below, how to order them in the output. \n         hispanic = factor(hispanic),\n         sex = factor(sex),\n         index_year = factor(index_year),\n         statinindicator = factor(statinindicator),\n         aspirinindicator = factor(aspirinindicator),\n         smokingindicator = factor(smokingindicator),\n         diabetesindicator = factor(diabetesindicator),\n         ckdindicator = factor(ckdindicator),\n         esrdindicator = factor(esrdindicator),\n         hfejindicator = factor(hfejindicator),\n         chdindicator = factor(chdindicator),\n         pcrindicator = factor(pcrindicator),\n         strokeindicator = factor(strokeindicator),\n         padindicator = factor(padindicator),\n         ascvdindicator = factor(ascvdindicator),\n         afindicator = factor(afindicator),\n         copdindicator = factor(copdindicator),\n         asthmaindicator = factor(asthmaindicator),\n         depressionindicator = factor(depressionindicator),\n         goutindicator = factor(goutindicator),\n         source = factor(source),\n         anticogindicator = factor(anticogindicator),\n         ktindicator = factor(ktindicator),\n         osaindicator = factor(osaindicator)\n  ) %>%\n  # arrange() sorts.\n  arrange(patid) %>%\n  # distinct() picks out distinct values, here of patid.\n  distinct(patid, .keep_all = TRUE)\n\n\n# here we go in and work on specific columns of `tab1` dataset and \n# order the levels (values) of that column in the way we want it presented in\n# the output table, using the factor() function. Basically, we're just taking \n# the column as is, and replacing it with the same data, but telling R what is \n# should be the intrinsic order of these values when R outputs anything with it. \n# (Not actually changing given values for a given observation)\ntab1$race <- factor(tab1$race, levels = c(\"American Indian or Alaska Native\",\n                                          \"Asian\",\n                                          \"Black or African American\",\n                                          \"Native Hawaiian or Other Pacific\",\n                                          \"White\",\n                                          \"Multiple Race\",\n                                          \"Other\",\n                                          \"Unknown\"))\ntab1$age_cat <- factor(tab1$age_cat, levels = c(\"<45 y\", \"45-64 y\", \">65 y\"))\ntab1$hispanic <- factor(tab1$hispanic, levels = c(\"Hispanic\", \"Not Hispanic\", \"Unknown\"))\n\n# note that above I'm using base R coding, not tidyverse syntax. \n# I could have accomplished the above with tidyverse (dplyr) syntax also:\ntab1 <- tab1 %>% \n  mutate(race = factor(race, levels = c(\"American Indian or Alaska Native\",\n                                        \"Asian\",\n                                        \"Black or African American\",\n                                        \"Native Hawaiian or Other Pacific\",\n                                        \"White\",\n                                        \"Multiple Race\",\n                                        \"Other\",\n                                        \"Unknown\")),\n         age_cat = factor(age_cat, levels = c(\"<45 y\", \"45-64 y\", \">65 y\")),\n         hispanic = factor(hispanic, levels = c(\"Hispanic\", \"Not Hispanic\", \"Unknown\")),\n         ckdindicator = as.integer(ckdindicator))\n```\n:::\n\n\n## Labels and Units\n\nHere we can apply label and unit attributes to each column. Labels will be printed (in the output table) as specified here, and will be appended with units, if they're assigned. Note here I only assign one unit (to age), as most everything else is categorical. But, for example, BP would need units also if included.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Labels\nlabel(tab1$age) <- \"Age\"\nlabel(tab1$age_cat) <- \"Age Category\"\nlabel(tab1$sex) <- \"Sex\"\nlabel(tab1$race) <- \"Race\"\nlabel(tab1$hispanic) <-  \"Ethnicity\"\nlabel(tab1$smokingindicator) <- \"Current Smoker\"\nlabel(tab1$diabetesindicator) <- \"Diabetes\"\nlabel(tab1$ckdindicator) <- \"Chronic kidney disease\"\nlabel(tab1$esrdindicator) <- \"End-stage renal disease\"\nlabel(tab1$hfejindicator) <- \"Heart failure w/ reduced EF\"\nlabel(tab1$chdindicator) <- \"Coronary heart disease\"\nlabel(tab1$pcrindicator) <- \"Prior coronary revascularization\"\nlabel(tab1$strokeindicator) <- \"Prior stroke or TIA\"\nlabel(tab1$padindicator) <- \"Peripheral arterial disease\"\nlabel(tab1$ascvdindicator) <- \"History of clinical ASCVD\"\nlabel(tab1$afindicator) <- \"Atrial fibrillation\"\nlabel(tab1$copdindicator) <- \"Chronic obstructive pulmonary disease\"\nlabel(tab1$asthmaindicator) <- \"Asthma\"\nlabel(tab1$depressionindicator) <- \"Depression\"\nlabel(tab1$combined_score_num) <- \"Combined Comorbidity Score\"\nlabel(tab1$statinindicator) <- \"Statin\"\nlabel(tab1$aspirinindicator) <- \"Aspirin\"\nlabel(tab1$index_year) <- \"Index Year\"\n\n# Units\nunits(tab1$age) <- \"years\"\n```\n:::\n\n\n## Setting up the output\n\nHere we tell table1 to use our label list, as well as what columns to give us. This is important for stratified columns (e.g., Medicaid and Medicare, or those with EHR and those without EHR data). I think you can do as many strata as you want, though obviously a lot will not look good in the table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#### Render Table 1 ####\n# Setup\n\n# here, the first string is the column header, and following the = sign is \n# how to get just the patients that should be used for that column. \n# so for everyone, we use the entire tab1 dataset. For Medicaid column, we \n# subset() tab1 to get only those people who have source = \"FLM\"\nstrata_t1 <- c(list(\"Overall Cohort\" = tab1),\n               list(\"Medicaid-Insured\" = subset(tab1, source == \"FLM\")),\n               list(\"Medicare-Insured\" = subset(tab1, source == \"MED\")))\n\n# tell table1 where to get our labels\nlabels_t1 <- list(\n  variables = list(age = render.varlabel(tab1$age),\n                   age_cat = render.varlabel(tab1$age_cat),\n                   sex = render.varlabel(tab1$sex),\n                   race = render.varlabel(tab1$race),\n                   hispanic = render.varlabel(tab1$hispanic),\n                   smokingindicator = render.varlabel(tab1$smokingindicator),\n                   diabetesindicator = render.varlabel(tab1$diabetesindicator),\n                   ckdindicator = render.varlabel(tab1$ckdindicator),\n                   esrdindicator = render.varlabel(tab1$esrdindicator),\n                   hfejindicator = render.varlabel(tab1$hfejindicator),\n                   chdindicator = render.varlabel(tab1$chdindicator),\n                   pcrindicator = render.varlabel(tab1$pcrindicator),\n                   strokeindicator = render.varlabel(tab1$strokeindicator),\n                   padindicator = render.varlabel(tab1$padindicator),\n                   ascvdindicator = render.varlabel(tab1$ascvdindicator),\n                   afindicator = render.varlabel(tab1$afindicator),\n                   copdindicator = render.varlabel(tab1$copdindicator),\n                   asthmaindicator = render.varlabel(tab1$asthmaindicator),\n                   depressionindicator = render.varlabel(tab1$depressionindicator),\n                   combined_score_num = render.varlabel(tab1$combined_score_num),\n                   statinindicator = render.varlabel(tab1$statinindicator),\n                   aspirinindicator = render.varlabel(tab1$aspirinindicator),\n                   index_year = render.varlabel(tab1$index_year)\n  ))\n```\n:::\n\n\n## Some functions to style the output\n\nBasically here we're just making some stylistic choices about what we want output to look like for categorical variables, continuous variables, and for the column headers. See the URL above for more of a description of these. But, you probably don't need to edit this at all for any tables you create.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add commas to Ns and cell counts\nrender.continuous <- function(x, ...) {\n  with(stats.default(x, ...), c(\"\", \"Mean \\u00B1 SD\"  = sprintf(\"%s \\u00B1 %s\", signif_pad(MEAN, 3, big.mark=\",\"), signif_pad(SD, 3, big.mark=\",\"))))\n}\n\nrender.categorical <- function(x, ...) {\n  c(\"\", sapply(stats.apply.rounding(stats.default(x)), function(y) with(y, sprintf(\"%s (%s%%)\", prettyNum(FREQ, big.mark=\",\"), PCT))))\n}\n\nrender.strat <- function(label, n, ...) {\n  sprintf(\"<span class='stratlabel'>%s<br><span class='stratn'>(N=%s)</span></span>\", label, prettyNum(n, big.mark=\",\"))\n}\n```\n:::\n\n\n## Render the Table\n\nNow create the actual table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Render Table 1 -- Will need to Save the HTML for export off ResVault\ntable1(strata_t1, \n       labels_t1, \n       droplevels = TRUE, \n       # these next three lines are just applying the functions we created above\n       # basically can be read as \"for rendering continuous variables, use the \n       # function render.continuous()\", etc. \n       render.continuous = render.continuous, \n       render.strat = render.strat, \n       render.categorical = render.categorical)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall Cohort<br><span class='stratn'>(N=143,054)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Medicaid-Insured<br><span class='stratn'>(N= 71,774)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Medicare-Insured<br><span class='stratn'>(N= 71,280)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Age (years)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Mean ± SD</td>\n<td class='lastrow'>59.1 ± 21.6</td>\n<td class='lastrow'>46.5 ± 14.3</td>\n<td class='lastrow'>71.8 ± 20.1</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Age Category</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'><45 y</td>\n<td>38,213 (26.7%)</td>\n<td>33,176 (46.2%)</td>\n<td>5,037 (7.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>45-64 y</td>\n<td>51,007 (35.7%)</td>\n<td>34,274 (47.8%)</td>\n<td>16,733 (23.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>>65 y</td>\n<td class='lastrow'>53,834 (37.6%)</td>\n<td class='lastrow'>4,324 (6.0%)</td>\n<td class='lastrow'>49,510 (69.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Sex</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Female</td>\n<td>81,555 (57.0%)</td>\n<td>43,011 (59.9%)</td>\n<td>38,544 (54.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Male</td>\n<td>61,493 (43.0%)</td>\n<td>28,760 (40.1%)</td>\n<td>32,733 (45.9%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Unknow</td>\n<td class='lastrow'>6 (0.0%)</td>\n<td class='lastrow'>3 (0.0%)</td>\n<td class='lastrow'>3 (0.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Race</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>American Indian or Alaska Native</td>\n<td>334 (0.2%)</td>\n<td>165 (0.2%)</td>\n<td>169 (0.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Asian</td>\n<td>1,447 (1.0%)</td>\n<td>659 (0.9%)</td>\n<td>788 (1.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Black or African American</td>\n<td>33,814 (23.6%)</td>\n<td>22,041 (30.7%)</td>\n<td>11,773 (16.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Native Hawaiian or Other Pacific</td>\n<td>33 (0.0%)</td>\n<td>11 (0.0%)</td>\n<td>22 (0.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>White</td>\n<td>70,156 (49.0%)</td>\n<td>25,304 (35.3%)</td>\n<td>44,852 (62.9%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Multiple Race</td>\n<td>503 (0.4%)</td>\n<td>167 (0.2%)</td>\n<td>336 (0.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Other</td>\n<td>20,555 (14.4%)</td>\n<td>11,610 (16.2%)</td>\n<td>8,945 (12.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Unknown</td>\n<td class='lastrow'>16,212 (11.3%)</td>\n<td class='lastrow'>11,817 (16.5%)</td>\n<td class='lastrow'>4,395 (6.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Ethnicity</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Hispanic</td>\n<td>22,680 (15.9%)</td>\n<td>13,016 (18.1%)</td>\n<td>9,664 (13.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Not Hispanic</td>\n<td>99,483 (69.5%)</td>\n<td>44,696 (62.3%)</td>\n<td>54,787 (76.9%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Unknown</td>\n<td>16,203 (11.3%)</td>\n<td>11,865 (16.5%)</td>\n<td>4,338 (6.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>4688 (3.3%)</td>\n<td class='lastrow'>2197 (3.1%)</td>\n<td class='lastrow'>2491 (3.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Current Smoker</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>110,974 (77.6%)</td>\n<td>54,739 (76.3%)</td>\n<td>56,235 (78.9%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>32,080 (22.4%)</td>\n<td class='lastrow'>17,035 (23.7%)</td>\n<td class='lastrow'>15,045 (21.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Diabetes</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>113,421 (79.3%)</td>\n<td>57,972 (80.8%)</td>\n<td>55,449 (77.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>29,633 (20.7%)</td>\n<td class='lastrow'>13,802 (19.2%)</td>\n<td class='lastrow'>15,831 (22.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Chronic kidney disease</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Mean ± SD</td>\n<td class='lastrow'>1.12 ± 0.329</td>\n<td class='lastrow'>1.07 ± 0.257</td>\n<td class='lastrow'>1.18 ± 0.380</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>End-stage renal disease</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>141,982 (99.3%)</td>\n<td>71,541 (99.7%)</td>\n<td>70,441 (98.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>1,072 (0.7%)</td>\n<td class='lastrow'>233 (0.3%)</td>\n<td class='lastrow'>839 (1.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Heart failure w/ reduced EF</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>140,196 (98.0%)</td>\n<td>70,510 (98.2%)</td>\n<td>69,686 (97.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>2,858 (2.0%)</td>\n<td class='lastrow'>1,264 (1.8%)</td>\n<td class='lastrow'>1,594 (2.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Coronary heart disease</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>135,114 (94.4%)</td>\n<td>69,032 (96.2%)</td>\n<td>66,082 (92.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>7,940 (5.6%)</td>\n<td class='lastrow'>2,742 (3.8%)</td>\n<td class='lastrow'>5,198 (7.3%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Prior coronary revascularization</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>142,326 (99.5%)</td>\n<td>71,632 (99.8%)</td>\n<td>70,694 (99.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>728 (0.5%)</td>\n<td class='lastrow'>142 (0.2%)</td>\n<td class='lastrow'>586 (0.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Prior stroke or TIA</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>140,762 (98.4%)</td>\n<td>71,465 (99.6%)</td>\n<td>69,297 (97.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>2,292 (1.6%)</td>\n<td class='lastrow'>309 (0.4%)</td>\n<td class='lastrow'>1,983 (2.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Peripheral arterial disease</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>133,666 (93.4%)</td>\n<td>70,291 (97.9%)</td>\n<td>63,375 (88.9%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>9,388 (6.6%)</td>\n<td class='lastrow'>1,483 (2.1%)</td>\n<td class='lastrow'>7,905 (11.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>History of clinical ASCVD</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>125,638 (87.8%)</td>\n<td>67,545 (94.1%)</td>\n<td>58,093 (81.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>17,416 (12.2%)</td>\n<td class='lastrow'>4,229 (5.9%)</td>\n<td class='lastrow'>13,187 (18.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Atrial fibrillation</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>133,030 (93.0%)</td>\n<td>70,399 (98.1%)</td>\n<td>62,631 (87.9%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>10,024 (7.0%)</td>\n<td class='lastrow'>1,375 (1.9%)</td>\n<td class='lastrow'>8,649 (12.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Chronic obstructive pulmonary disease</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>135,285 (94.6%)</td>\n<td>67,186 (93.6%)</td>\n<td>68,099 (95.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>7,769 (5.4%)</td>\n<td class='lastrow'>4,588 (6.4%)</td>\n<td class='lastrow'>3,181 (4.5%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Asthma</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>136,988 (95.8%)</td>\n<td>66,919 (93.2%)</td>\n<td>70,069 (98.3%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>6,066 (4.2%)</td>\n<td class='lastrow'>4,855 (6.8%)</td>\n<td class='lastrow'>1,211 (1.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Depression</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>117,364 (82.0%)</td>\n<td>61,104 (85.1%)</td>\n<td>56,260 (78.9%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>25,690 (18.0%)</td>\n<td class='lastrow'>10,670 (14.9%)</td>\n<td class='lastrow'>15,020 (21.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Combined Comorbidity Score</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Mean ± SD</td>\n<td class='lastrow'>2.54 ± 3.53</td>\n<td class='lastrow'>1.57 ± 2.82</td>\n<td class='lastrow'>3.51 ± 3.89</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Statin</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>111,633 (78.0%)</td>\n<td>58,573 (81.6%)</td>\n<td>53,060 (74.4%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>31,421 (22.0%)</td>\n<td class='lastrow'>13,201 (18.4%)</td>\n<td class='lastrow'>18,220 (25.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Aspirin</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>0</td>\n<td>131,391 (91.8%)</td>\n<td>65,659 (91.5%)</td>\n<td>65,732 (92.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>1</td>\n<td class='lastrow'>11,663 (8.2%)</td>\n<td class='lastrow'>6,115 (8.5%)</td>\n<td class='lastrow'>5,548 (7.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Index Year</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>2012</td>\n<td>32 (0.0%)</td>\n<td>1 (0.0%)</td>\n<td>31 (0.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2013</td>\n<td>17,728 (12.4%)</td>\n<td>485 (0.7%)</td>\n<td>17,243 (24.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2014</td>\n<td>31,711 (22.2%)</td>\n<td>11,457 (16.0%)</td>\n<td>20,254 (28.4%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2015</td>\n<td>27,205 (19.0%)</td>\n<td>11,039 (15.4%)</td>\n<td>16,166 (22.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2016</td>\n<td>19,283 (13.5%)</td>\n<td>10,664 (14.9%)</td>\n<td>8,619 (12.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2017</td>\n<td>18,661 (13.0%)</td>\n<td>9,694 (13.5%)</td>\n<td>8,967 (12.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2018</td>\n<td>8,963 (6.3%)</td>\n<td>8,963 (12.5%)</td>\n<td>0 (0%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2019</td>\n<td>8,164 (5.7%)</td>\n<td>8,164 (11.4%)</td>\n<td>0 (0%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2020</td>\n<td>7,520 (5.3%)</td>\n<td>7,520 (10.5%)</td>\n<td>0 (0%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>2021</td>\n<td class='lastrow'>3,787 (2.6%)</td>\n<td class='lastrow'>3,787 (5.3%)</td>\n<td class='lastrow'>0 (0%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n\n```{.r .cell-code}\n# Can also save Table 1 for posterity, or to export as a CSV\n# would just need to uncomment the following code\n# t1 <- as.data.frame(table1(strata_t1, labels_t1, droplevels = TRUE,\n#                            render.continuous = render.continuous, render.strat = render.strat, render.categorical = render.categorical))\n# \n# write_csv(t1, file = \"path_to_directory/Table 1.csv\")\n```\n:::\n\n\nNote that this output still needs a bit of editing, e.g., copying the data in the '1' row for the various indicators, up to the the row with the respective label, and then deleting the '0' row and what was the '1' row. I think a modification can probably be built into the package to do this routinely, or as an option, but I haven't had time to fool with it. In any event, this gets us pretty close.\n\n## Getting this into Word\n\nOk, we have the table in HTML now, but we need it in Word. A straight copy + paste from R Studio viewer to word document does not work very well, because it either keeps all the HTML formatting (check by selecting all of the pasted table and adding all borders to the table), or it completely loses formatting if you do a Special Paste, i.e., no Word table structure any more.\n\nHere's a couple of ways around this (I'm sure there are others):\n\n1.  Export the output in the R Studio viewer to an HTML file on your computer. Then, open that file, hit CTRL+A (or CMD+A on Mac), CTRL + C, then go to Word Document and Paste Special -\\> HTML. It typically doesn't look as pretty, but fixes both of the above issues.\n\n2.  Let Flextable do the heavy lifting for this.\n\nHere, I use flextable. Instead of printing the `table1()` function results, as above, we can instead save them to an object, named `tbl1` below. Then, convert it to a flextable, and have the flextable package export it as a word document.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# same as above, but instead of printing, saving as object. \ntbl1 <- table1(strata_t1, \n               labels_t1, \n               droplevels = TRUE, \n               # these next three lines are just applying the functions we created above\n               # basically can be read as \"for rendering continuous variables, use the \n               # function render.continuous()\", etc. \n               render.continuous = render.continuous, \n               render.strat = render.strat, \n               render.categorical = render.categorical)\n\n# convert to flextable, then save as doc.\n# update path as needed. \nt1flex(tbl1) %>% \n  save_as_docx(path=\"./output/table1_output.docx\")\n```\n:::\n\n\nVoila - here's the [output](labdocs/output/table1_output.docx).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/table1-1.0/table1_defaults.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}