Associate Director
Associate Director
install.packages(c("gt","gtsummary","gtExtras")
)
install.packages(c("bit", "bslib", "callr", "commonmark", "data.table", "datawizard", "dials", "duckdb", "evaluate", "forestploter", "future", "future.apply", "ggiraph", "ggpubr", "ggrepel", "ggstatsplot", "globals", "gmp", "graphlayouts", "gtools", "HDInterval", "Hmisc", "infer", "insight", "jpeg", "knitr", "lme4", "lubridate", "maptools", "markdown", "Matrix", "mc2d", "modelr", "ordinal", "parameters", "parsnip", "pbapply", "performance", "pkgbuild", "pkgload", "plyr", "png", "polyclip", "ragg", "raster", "rbibutils", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rmarkdown", "roxygen2", "rstatix", "s2", "sass", "sf", "slider", "sp", "statsExpressions", "stringr", "terra", "tidytable", "V8", "vctrs", "whisker", "workflows", "xfun", "xts", "zip"))
library(truncnorm)
library(MASS)
install.packages("truncnorm")
library(truncnorm)
# simple correlation
samples=107
r=-0.34
??mvrnorm
# simple correlation
samples=107
r=-0.34
data = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
x = data[, 1]
y = data[, 2]
cor(x, y)
cor(x*0.01 + 42, y*3 - 1)
# simple correlation
samples=1070
data = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
x = data[, 1]
y = data[, 2]
cor(x, y)
cor(x*0.01 + 42, y*3 - 1)
data |> cor(x, y)
data |> cor(., x, y)
cor(data[[x]], data[[y]])
cor(data[x], data[y])
View(data)
cor(data[V1], data[V2])
cor(data[[V1]], data[[V2]])
lm(y ~ x)
mod <- lm(y ~ x)
summary(mod)
# simple correlation
samples=100
r=-0.34
data = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
x = data[, 1]
y = data[, 2]
cor(x, y)
mod <- lm(y ~ x)
summary(mod)
coef(summary(mod))
x1 <- rnorm(100, 15, 5)
x234 <- scale(matrix( rnorm(300), ncol=3 ))
View(x234)
x1234 <- cbind(scale(x1),x234)
c1 <- var(x1234)
View(c1)
chol1 <- solve(chol(c1))
View(chol1)
newx <-  x1234 %*% chol1
zapsmall(cor(newx))
all.equal( x1234[,1], newx[,1] )
?"%*%"
View(chol1)
View(c1)
View(chol1)
View(newx)
newc <- matrix(
c(1  , 0.4, 0.5, 0.6,
0.4, 1  , 0  , 0  ,
0.5, 0  , 1  , 0  ,
0.6, 0  , 0  , 1  ), ncol=4 )
View(newc)
eigen(newc)
chol2 <- chol(newc)
finalx <- newx %*% chol2 * sd(x1) + mean(x1)
mean(x1)
colMeans(finalx)
sd(x1)
apply(finalx, 2, sd)
zapsmall(cor(finalx))
pairs(finalx)
all.equal(x1, finalx[,1])
mod = cor(x, y)
summary(mod)
coef(summary(mod))
cor.test(x,y)
summary(cor.test(x, y))
mod
mod <- cor.test(x, y)
mod
mod$p.value
simple_cor <- function(samples, r) {
data = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
x = data[, 1]
y = data[, 2]
mod <- cor.test(x, y)
return(mod$p.value)
}
cor_out <- replicate(1000, simple_cor(100, -0.34))
mean(cor_out)
mean(cor_out) < 0.05
mean(cor_out < 0.05)
cor_out <- replicate(1000, simple_cor(50, -0.34))
mean(cor_out < 0.05)
cor_out <- replicate(1000, simple_cor(20, -0.34))
mean(cor_out < 0.05)
cor_out <- replicate(1000, simple_cor(20, -0.34))
mean(cor_out < 0.05)
cor_out
set.seed(NULL)
simple_cor <- function(samples, r) {
data = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
x = data[, 1]
y = data[, 2]
mod <- cor.test(x, y)
return(mod$p.value)
}
cor_out <- replicate(1000, simple_cor(20, -0.34))
mean(cor_out < 0.05)
cor_out
cor_out <- replicate(1000, simple_cor(30, -0.34))
mean(cor_out < 0.05)
cor_out
simple_cor <- function(samples, r) {
data = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
x = data[, 1]
y = data[, 2]
mod <- lm(y ~ x)
return(mod$stats[5])
}
cor_out <- replicate(1000, simple_cor(30, -0.34))
mean(cor_out < 0.05)
mod <- lm(y ~ x)
summary(mod)
coef(summary(mod))
mod$stats
mod <- lm(y ~ x)
mod
coef(summary(mod))
coef(summary(mod))[2,5]
coef(summary(mod))[2,4]
simple_cor <- function(samples, r) {
data = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
x = data[, 1]
y = data[, 2]
mod <- lm(y ~ x)
return(coef(summary(mod))[2,4])
}
cor_out <- replicate(1000, simple_cor(30, -0.34))
mean(cor_out < 0.05)
cor_out
data = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
data2 = mvrnorm(n=samples, mu=c(0, 0), Sigma = matrix(c(1, r, r, 1), nrow = 2), empirical = TRUE)
all.equal(data, data2)
install.packages("pwr")
??pwr.r.test
pwr.r.test(r=-0.34, n=107, sig.level=0.05, alternative="two.sided")
library(pwr)
pwr.r.test(r=-0.34, n=107, sig.level=0.05, alternative="two.sided")
pwr.r.test(r=-0.34, n=80, sig.level=0.05, alternative="two.sided")
pwr.r.test(r=-0.34, n=70, sig.level=0.05, alternative="two.sided")
cohen.ES(test = "f2", size = c("small", "medium", "large"))
cohen.ES(test = "f2", size = "large")
.15 / (.85)
# multiple linear regression
u = 3
r2 = .15
f2 = r2 / (1 - r2)
pwr.f2.test(u = u, # df in numerator, i.e., number of variables other than intercept
v = NULL, # df in denomenator, i.e., number of error degrees of freedom
f2 = f2,  # effect size
sig.level = 0.05,
power = 0.8)
# multiple linear regression
u = 3
r2 = .15
f2 = r2 / (1 - r2)
v <- pwr.f2.test(u = u, # df in numerator, i.e., number of variables other than intercept
v = NULL, # df in denomenator, i.e., number of error degrees of freedom
f2 = f2,  # effect size
sig.level = 0.05,
power = 0.8)$v
(n = v + u + 1)
mlr <- function(u, r2) {
f2 <- r2 / (1 - r2)
pwr.f2.test(u = u, # df in numerator, i.e., number of variables other than intercept
v = NULL, # df in denomenator, i.e., number of error degrees of freedom
f2 = f2,  # effect size
sig.level = 0.05,
power = 0.8)$v + u + 1
}
mlr(3, .15)
mlr <- function(u, r2) {
f2 <- r2 / (1 - r2)
ceiling(pwr.f2.test(u = u, # df in numerator, i.e., number of variables other than intercept
v = NULL, # df in denomenator, i.e., number of error degrees of freedom
f2 = f2,  # effect size
sig.level = 0.05,
power = 0.8)$v + u + 1)
}
mlr(3, .15)
??data.frame
??base:data.frame
??base::data.frame
save_mlr <- data.frame(r2 = seq(.01, .25, by = .01))
View(save_mlr)
save_mlr <- data.frame(u = 3, r2 = seq(.01, .25, by = .01))
save_mlr <- data.frame(u = 3, r2 = seq(.01, .25, by = .01), n = mlr(u, r2))
View(save_mlr)
save_mlr <- data.frame(u = 3, r2 = seq(.01, .25, by = .01))
save_mlr[, 3] <- mlr(u, r2)
View(save_mlr)
save_mlr[, 3] <- mlr(save_mlr$u, save_mlr$r2)
View(save_mlr)
save_mlr[, 3] <- mlr(u = save_mlr$u, r2 = save_mlr$r2)
mlr(3, .15)
library(tidyverse)
save_mlr <- data.frame(u = 3, r2 = seq(.01, .25, by = .01))
save_mlr <- save_mlr |>
mutate(n = mlr(u, r2))
ns <-
for (i in .01:.25) {
mlr(3, i)
}
ns <-
for (i in .01:.25) {
print(i)
mlr(3, i)
}
ns <- list()
for (i in 1:25) {
ns[[1]] <- i/100
ns[[2]] <- mlr(3, i/100)
}
View(ns)
ns <- list()
for (i in .01:.25) {
ns[[i]] <- mlr(3, i/100)
}
ns <- list()
for (i in .01:.25) {
ns[[i]] <- mlr(3, i)
}
??apply
for (i in 1:25) {
mlr(3, i)
}
for (i in 1:25) {
mlr(3, i)
}
for (i in .1:.25) {
mlr(3, i)
}
check <- for (i in .1:.25) {
mlr(3, i)
}
mlr <- function(u, r2) {
f2 <- r2 / (1 - r2)
n = ceiling(pwr.f2.test(u = u, # df in numerator, i.e., number of variables other than intercept
v = NULL, # df in denomenator, i.e., number of error degrees of freedom
f2 = f2,  # effect size
sig.level = 0.05,
power = 0.8)$v + u + 1)
return(n)
}
check <- for (i in .1:.25) {
mlr(3, i)
}
check <- list()
for (i in .1:.25) {
check[[i]] <- mlr(3, i)
}
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(3, r2)
}
View(check)
as.vector(check)
transpose(check)
as.vector(transpose(check))
unlist(check)
transpose(unlist(check))
save_mlr[, 3] <- unlist(check)
View(save_mlr)
mlr_outs <- function(u, r2min, r2max, r2by) {
save_mlr <- data.frame(u = u, r2 = seq(r2min, r2max, by = r2by))
check <- for (i in length(save_mlr)) {
r2 = i/100
check[[i]] <- mlr(u, r2)
}
save_mlr[, 3] <- unlist(check)
}
mlr_outs <- function(u, r2min, r2max, r2by) {
save_mlr <- data.frame(u = u, r2 = seq(r2min, r2max, by = r2by))
check <- for (i in length(save_mlr)) {
r2 = i/100
check[[i]] <- mlr(u, r2)
}
save_mlr[, 3] <- unlist(check)
return(save_mlr)
}
mlr_ns <- mlr_outs(3, .01, .35, .01)
View(mlr_ns)
mlr_outs <- function(u, r2min, r2max, r2by) {
save_mlr <- data.frame(u = u, r2 = seq(r2min, r2max, by = r2by))
check = list()
check <- for (i in length(save_mlr)) {
r2 = i/100
check[[i]] <- mlr(u, r2)
}
save_mlr[, 3] <- unlist(check)
return(save_mlr)
}
mlr_ns <- mlr_outs(3, .01, .35, .01)
View(mlr_ns)
mlr_outs <- function(u, r2min, r2max, r2by) {
save_mlr <- data.frame(u = u, r2 = seq(r2min, r2max, by = r2by))
check = list()
check <- for (i in 1:length(save_mlr)) {
r2 = i/100
check[[i]] <- mlr(u, r2)
}
save_mlr[, 3] <- unlist(check)
return(save_mlr)
}
mlr_ns <- mlr_outs(3, .01, .35, .01)
mlr_outs <- function(u, r2min, r2max, r2by) {
save_mlr <- data.frame(u = u, r2 = seq(r2min, r2max, by = r2by))
check = list()
for (i in 1:length(save_mlr)) {
r2 = i/100
check[[i]] <- mlr(u, r2)
}
save_mlr[, 3] <- unlist(check)
return(save_mlr)
}
mlr_ns <- mlr_outs(3, .01, .35, .01)
seq_along(.25:.50)
save_mlr <- data.frame(u = 3, r2 = seq(.01, .25, by = .01))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(3, r2)
}
check <- unlist(check)
save_mlr[, 3] <- unlist(check)
View(save_mlr)
save_mlr <- data.frame(u = 3, r2 = seq(.01, .25, by = .01))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(3, r2)
}
check <- unlist(check)
save_mlr[, 3] <- unlist(check)
save_mlr2 <- data.frame(u = 1, r2 = seq(.01, .25, by = .01))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(1, r2)
}
check <- unlist(check)
save_mlr2[, 3] <- unlist(check)
View(save_mlr2)
mlr2 <- function(u, r2) {
f2 <- r2 / (1 - r2)
n = ceiling(pwr.f2.test(u = u, # df in numerator, i.e., number of variables other than intercept
v = NULL, # df in denomenator, i.e., number of error degrees of freedom
f2 = f2,  # effect size
sig.level = 0.05,
power = 0.8)$v + 2)
return(n)
}
save_mlr2 <- data.frame(u = 1, r2 = seq(.01, .25, by = .01))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr2(1, r2)
}
check <- unlist(check)
save_mlr2[, 3] <- unlist(check)
save_mlr <- data.frame(u = 2, r2 = seq(.01, .25, by = .01))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(2, r2)
}
check <- unlist(check)
save_mlr[, 3] <- unlist(check)
View(save_mlr)
save_mlr <- data.frame(u = 2, r2 = seq(.01, .25, by = .01))
save_mlr <- save_mlr |>
mutate(ef = r2/(1-42))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(2, r2)
}
check <- unlist(check)
save_mlr[, 4] <- unlist(check)
colnames(save_mlr) <- c("n.covs", "r-squared", "effect_size", "n")
View(save_mlr)
colnames(save_mlr) <- c("n.covs", "r.squared", "effect.size", "n")
save_mlr <- data.frame(u = 2, r2 = seq(.01, .25, by = .01))
save_mlr <- save_mlr |>
mutate(ef = r2/(1-r2))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(2, r2)
}
check <- unlist(check)
save_mlr[, 4] <- unlist(check)
colnames(save_mlr) <- c("n.covs", "r.squared", "effect.size", "n")
colnames(save_mlr) <- c("n.covs", "r.squared", "scaled.effect.size", "n")
save_mlr <- data.frame(u = 3, r2 = seq(.01, .25, by = .01))
save_mlr <- save_mlr |>
mutate(ef = r2/(1-r2))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(3, r2)
}
check <- unlist(check)
save_mlr[, 4] <- unlist(check)
colnames(save_mlr) <- c("n.covs", "model.r.squared", "scaled.effect.size", "n")
sample.size.ests <- save_mlr
save_mlr <- data.frame(u = 2, r2 = seq(.01, .25, by = .01))
save_mlr <- save_mlr |>
mutate(ef = r2/(1-r2))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr(2, r2)
}
check <- unlist(check)
save_mlr[, 4] <- unlist(check)
colnames(save_mlr) <- c("n.covs", "model.r.squared", "scaled.effect.size", "n")
sample.size.ests <- bind_rows(sample.size.ests, save_mlr)
save_mlr <- data.frame(u = 1, r2 = seq(.01, .25, by = .01))
save_mlr <- save_mlr |>
mutate(ef = r2/(1-r2))
check <- list()
for (i in 1:25) {
r2 = i/100
check[[i]] <- mlr2(1, r2)
}
check <- unlist(check)
save_mlr[, 4] <- unlist(check)
colnames(save_mlr) <- c("n.covs", "model.r.squared", "scaled.effect.size", "n")
sample.size.ests <- bind_rows(sample.size.ests, save_mlr)
View(sample.size.ests)
ggplot(data = sample.size.ests, aes(x = model.r.squared, y = n, colour = n.covs)) +
geom_point() +
geom_line()
ggplot(data = sample.size.ests, aes(x = model.r.squared, y = n, class = n.covs, colour = n.covs)) +
geom_point() +
geom_line()
ggplot(data = sample.size.ests, aes(x = model.r.squared, y = n, class = n.covs, colour = n.covs)) +
geom_point(stat="identity") +
geom_line()
ggplot(data = sample.size.ests, aes(x = model.r.squared, y = n, class = n.covs, colour = n.covs)) +
geom_point(stat="identity") +
geom_line(stat="identity")
ggplot(data = sample.size.ests, aes(x = model.r.squared, y = n, group = n.covs, colour = n.covs)) +
geom_point(stat="identity") +
geom_line(stat="identity")
ggplot(data = sample.size.ests, aes(x = model.r.squared, y = n, group = n.covs, colour = as.factor(n.covs))) +
geom_point(stat="identity") +
geom_line(stat="identity")
ggplot(data = sample.size.ests, aes(y = model.r.squared, x = n, group = n.covs, colour = as.factor(n.covs))) +
geom_point(stat="identity") +
geom_line(stat="identity")
save_mlr2 <- data.frame(u = 1, r2 = seq(.01, .25, by = .01))
ss.plot.data <- sample.size.ests |> filter(n < 600)
ggplot(data = ss.plot.data, aes(y = model.r.squared, x = n, group = n.covs, colour = as.factor(n.covs))) +
geom_point(stat="identity") +
geom_line(stat="identity")
ggplot(data = ss.plot.data, aes(x = model.r.squared, y = n, group = n.covs, colour = as.factor(n.covs))) +
geom_point(stat="identity") +
geom_line(stat="identity")
ss.plot.data <- sample.size.ests |> filter(n < 600) |> mutate(n.covs = as.factor(n.covs))
ggplot(data = ss.plot.data, aes(x = model.r.squared, y = n, group = n.covs, colour = n.covs)) +
geom_point(stat="identity") +
geom_line(stat="identity")
ggplot(data = ss.plot.data, aes(x = model.r.squared, y = n, group = n.covs, colour = n.covs)) +
geom_point(stat="identity") +
geom_line(stat="identity")
